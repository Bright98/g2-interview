// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc2
// source: todo.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TodoService_InsertTodoList_FullMethodName  = "/TodoGrpc.TodoService/InsertTodoList"
	TodoService_EditTodoList_FullMethodName    = "/TodoGrpc.TodoService/EditTodoList"
	TodoService_RemoveTodoList_FullMethodName  = "/TodoGrpc.TodoService/RemoveTodoList"
	TodoService_GetTodoListByID_FullMethodName = "/TodoGrpc.TodoService/GetTodoListByID"
	TodoService_GetTodoListList_FullMethodName = "/TodoGrpc.TodoService/GetTodoListList"
	TodoService_InsertTodoItem_FullMethodName  = "/TodoGrpc.TodoService/InsertTodoItem"
	TodoService_EditTodoItem_FullMethodName    = "/TodoGrpc.TodoService/EditTodoItem"
	TodoService_RemoveTodoItem_FullMethodName  = "/TodoGrpc.TodoService/RemoveTodoItem"
	TodoService_GetTodoItemByID_FullMethodName = "/TodoGrpc.TodoService/GetTodoItemByID"
	TodoService_GetTodoItemList_FullMethodName = "/TodoGrpc.TodoService/GetTodoItemList"
)

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	InsertTodoList(ctx context.Context, in *TodoList, opts ...grpc.CallOption) (*InsertedIDResponse, error)
	EditTodoList(ctx context.Context, in *TodoList, opts ...grpc.CallOption) (*ErrorResponse, error)
	RemoveTodoList(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	GetTodoListByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*TodoListResponse, error)
	GetTodoListList(ctx context.Context, in *SkipLimitRequest, opts ...grpc.CallOption) (*TodoListListResponse, error)
	InsertTodoItem(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*InsertedIDResponse, error)
	EditTodoItem(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*ErrorResponse, error)
	RemoveTodoItem(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	GetTodoItemByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*TodoItemResponse, error)
	GetTodoItemList(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*TodoItemListResponse, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) InsertTodoList(ctx context.Context, in *TodoList, opts ...grpc.CallOption) (*InsertedIDResponse, error) {
	out := new(InsertedIDResponse)
	err := c.cc.Invoke(ctx, TodoService_InsertTodoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) EditTodoList(ctx context.Context, in *TodoList, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, TodoService_EditTodoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) RemoveTodoList(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, TodoService_RemoveTodoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoListByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*TodoListResponse, error) {
	out := new(TodoListResponse)
	err := c.cc.Invoke(ctx, TodoService_GetTodoListByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoListList(ctx context.Context, in *SkipLimitRequest, opts ...grpc.CallOption) (*TodoListListResponse, error) {
	out := new(TodoListListResponse)
	err := c.cc.Invoke(ctx, TodoService_GetTodoListList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) InsertTodoItem(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*InsertedIDResponse, error) {
	out := new(InsertedIDResponse)
	err := c.cc.Invoke(ctx, TodoService_InsertTodoItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) EditTodoItem(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, TodoService_EditTodoItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) RemoveTodoItem(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, TodoService_RemoveTodoItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoItemByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*TodoItemResponse, error) {
	out := new(TodoItemResponse)
	err := c.cc.Invoke(ctx, TodoService_GetTodoItemByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoItemList(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*TodoItemListResponse, error) {
	out := new(TodoItemListResponse)
	err := c.cc.Invoke(ctx, TodoService_GetTodoItemList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	InsertTodoList(context.Context, *TodoList) (*InsertedIDResponse, error)
	EditTodoList(context.Context, *TodoList) (*ErrorResponse, error)
	RemoveTodoList(context.Context, *IDRequest) (*ErrorResponse, error)
	GetTodoListByID(context.Context, *IDRequest) (*TodoListResponse, error)
	GetTodoListList(context.Context, *SkipLimitRequest) (*TodoListListResponse, error)
	InsertTodoItem(context.Context, *TodoItem) (*InsertedIDResponse, error)
	EditTodoItem(context.Context, *TodoItem) (*ErrorResponse, error)
	RemoveTodoItem(context.Context, *IDRequest) (*ErrorResponse, error)
	GetTodoItemByID(context.Context, *IDRequest) (*TodoItemResponse, error)
	GetTodoItemList(context.Context, *IDRequest) (*TodoItemListResponse, error)
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) InsertTodoList(context.Context, *TodoList) (*InsertedIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTodoList not implemented")
}
func (UnimplementedTodoServiceServer) EditTodoList(context.Context, *TodoList) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTodoList not implemented")
}
func (UnimplementedTodoServiceServer) RemoveTodoList(context.Context, *IDRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTodoList not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoListByID(context.Context, *IDRequest) (*TodoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoListByID not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoListList(context.Context, *SkipLimitRequest) (*TodoListListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoListList not implemented")
}
func (UnimplementedTodoServiceServer) InsertTodoItem(context.Context, *TodoItem) (*InsertedIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) EditTodoItem(context.Context, *TodoItem) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) RemoveTodoItem(context.Context, *IDRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoItemByID(context.Context, *IDRequest) (*TodoItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoItemByID not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoItemList(context.Context, *IDRequest) (*TodoItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoItemList not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_InsertTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).InsertTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_InsertTodoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).InsertTodoList(ctx, req.(*TodoList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_EditTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).EditTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_EditTodoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).EditTodoList(ctx, req.(*TodoList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_RemoveTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).RemoveTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_RemoveTodoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).RemoveTodoList(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoListByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoListByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetTodoListByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoListByID(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoListList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoListList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetTodoListList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoListList(ctx, req.(*SkipLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_InsertTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).InsertTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_InsertTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).InsertTodoItem(ctx, req.(*TodoItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_EditTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).EditTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_EditTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).EditTodoItem(ctx, req.(*TodoItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_RemoveTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).RemoveTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_RemoveTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).RemoveTodoItem(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoItemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoItemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetTodoItemByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoItemByID(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetTodoItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoItemList(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TodoGrpc.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertTodoList",
			Handler:    _TodoService_InsertTodoList_Handler,
		},
		{
			MethodName: "EditTodoList",
			Handler:    _TodoService_EditTodoList_Handler,
		},
		{
			MethodName: "RemoveTodoList",
			Handler:    _TodoService_RemoveTodoList_Handler,
		},
		{
			MethodName: "GetTodoListByID",
			Handler:    _TodoService_GetTodoListByID_Handler,
		},
		{
			MethodName: "GetTodoListList",
			Handler:    _TodoService_GetTodoListList_Handler,
		},
		{
			MethodName: "InsertTodoItem",
			Handler:    _TodoService_InsertTodoItem_Handler,
		},
		{
			MethodName: "EditTodoItem",
			Handler:    _TodoService_EditTodoItem_Handler,
		},
		{
			MethodName: "RemoveTodoItem",
			Handler:    _TodoService_RemoveTodoItem_Handler,
		},
		{
			MethodName: "GetTodoItemByID",
			Handler:    _TodoService_GetTodoItemByID_Handler,
		},
		{
			MethodName: "GetTodoItemList",
			Handler:    _TodoService_GetTodoItemList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
